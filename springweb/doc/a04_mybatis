# 마이바티즈를 통한 DB연동처리
1. 기본 환경 구성
	1) 마이바티즈라는 DB연동처리하는 프레임워크를 활용해서 DB연동 sql처리
	2) 컨테이너에 DB연결 객체 선언
		DBCP연결 객체를 통해 드라이버, 아이피, 계정, 패스워드를 통해 연결
	3) mybatis 프레임워크 설정
		- 위 선언된 연결객체를 통해서 
		- mybatis 공통 xml선언
			- 사용하게될 sql을 처리하는 xml선언 위치 선언
	4) 사용하게 될 DAO 인터페이스 폴드 선언 : 이 폴드에서 선언된 인터페이스가 실제 dao객체와 연동
2. 처리 프로세스
	1) service ==> dao인터페이스 ==> xml에 의해 선언된 내용을 프레임워크로 dao로 만듦	
3. 마이바티즈 환경 구성
	1) 프레임워크를 통해 container 환경 설정
	2) dao 자바코드를 프레임워크에 의해서 자동으로 생성
	3) 개발자는 
		dao 인터페이스 작성
		 xml로 dao인터페이스와 연결되는 sql을 작성하면 완료
4. 개발 순서
	1) sql 작성
		SELECT *
		FROM emp100
		WHERE ename LIKE '%'||'A'||'%'
		AND job LIKE '%'||''||'%'
	2) sql 처리를 위한 DTO(VO)를 작성
		Emp 		 
	3) db처리 인터페이스 선언(dao패키지하위에)  >>**xml로 설정하기위해 //코드 안바꾸고 확장하려면 설정파일 바꿔야되잖아
		public List<Emp> getEmpList(Emp sch); 				//dao에 인터페이스 선언만하면되니까
	3) 공통 mybatis xml에 공통 vo 등록, 각 업무단위 mapper.xml을 추가 및 선언
	4) mapper.xml에서
	 A01_EmpMapper.xml : 선언된 인터페이스
	 		실제 사용될 DAO객체를 생성
		- 인터페이스명 ==> namespace명	
			하나의 dao
		- 요소객체 안에 사용할 sql 처리			
		- 메서드명 ==> id명 
		- 메서드의 매개변수 ==> parameterType
		- 메서드의 리턴값 ==> resultType//resultMap
	5) service에서 dao호출
	6) controller에서 service호출
	7) controller에 요청 및 모델데이터 선언
	8) view(jsp) 구현 모델데이터 출력
	
	

# mybatis 프레임워크 연습
1. 단일 리턴값 가져오기
	- 단일 값
	#1
	1) sql
		select count(*)
		from emp100	
	2) dao의 메서드 선언
		public int empCount();
	3) XXXMapper.xml
		dao
		<select id="empCount" resultType="int">
			select count(*)
			from emp100	
		</select>
	4) main()에서 호출
		System.out.println("사원수:"+dao.empCount());		
	#2
	1) sql //한꺼번에 두 개
		select max(sal) msal
		from emp100	
		select ename
		from emp100
		where empno=7369
	2) dao의 메서드 선언
		public double empMaxSal();
		public String getEname();
	3) XXXMapper.xml
		dao
		<select id="empMaxSal" resultType="double"> //메서드명을 id값을 설정
			select max(sal) msal
			from emp100	
		</select>
		<select id="getEname" resultType="String"> //메서드명을 id값을 설정
			select ename
			from emp100
			where empno=7369
		</select>
	4) main()에서 호출
		System.out.println("최대급여:"+dao.empMaxSal());		
		System.out.println("사원명:"+dao.getEname());		
	
	
	ex1) 20번 부서의 최대 급여 처리
		select max(sal) from emp100 where deptno=20
	ex2) 가장 높은 관리자번호
		select max(mgr) from emp100
	ex3) 사원명이 WARD의 직책명
		select job from emp100 where ename='WARD'
		
		
		select max(sal) from emp100 where deptno=20
		select max(mgr) from emp100
		select job from emp100 where ename='WARD'
		
		public double getMaxSalByDept();
		public int getMaxMgr();
		public String getJobByEname();
		
		<select id="getMaxSalByDept" resultType="double">
			select max(sal) from emp100 where deptno=20
		</select>
		<select id="getMaxMgr" resultType="int">
			select max(mgr) from emp100
		</select>
		<select id="getJobByEname" resultType="String">
			select job from emp100 where ename='WARD'
		</select>
		
		main()
		dao.getMaxSalByDept
		dao.getMaxMgr
		dao.getJobByEname
	
	- 단일 객체
		여러 컬럼을 한 행으로 처리되는 구분
		type을 객체로 설정해서 처리함
		SQL
			select * from emp100 where empno=7369;
			select * from emp100 where ename='SMITH';
		vo 		: 결과에 따른 vo객체 생성
		DAO단 	: INTERFACE 기능메서드 선언
			public Emp getEmpByEmpno();
			public Emp getEmpByEname();
		mapper
			공통 mybatis에서 선언한 alias명인 객체
			<select id="getEmpByEmpno" resultType="emp">
				select * from emp100 where empno=7369
			</select>
			<select id="getEmpByEname" resultType="emp">
				select * from emp100 where ename='SMITH'
			</select>
		main()
			Emp emp01= dao.getEmpByEmpno();
			System.out.println("객체의 사원번호:"+emp01.getEmpno)	
			System.out.println("객체의 사원명:"+emp01.getEname)	
			Emp emp02 = dao.getEmpByEname();
			System.out.println("객체의 사원번호:"+emp01.getEmpno)	
			System.out.println("객체의 사원명:"+emp01.getEname)	
			
	
	
2. 다중의 리턴값 가져오기
 	- list형식
 	select결과로 단일행이 아닌 다중 행인 경우
 	1) 컬럼명과 property가 동일한 경우
 		resultType
 	2) 컬럼명과 property가 다르게 설정해야하는 경우
 		resultMap활용
 		
 		select empno no, ename name ==> from emp
 		컬럼명은 no  	property가 empno
 		컬럼명은 name 	property가 ename
 		ex) 컬럼명과 property가 다른 경우 
 			VO Emp, Dept 혼합 VO
 				EmpDept
 					private Emp emp;
 					private Dept dept;
 					컬럼명 empno property emp.empno
 					컬럼명 dname property dept.dname
 			<resultMap id="empRst"
 				<result property="empno" column="no">
 				<result property="dname" column="no">
 			<select id="empRst">
 				<result property="empno" column="no">		
 				<result property="dept.dname" column="dname">
 		
 		SELECT empno as NO, ename as name, sal+nvl(comm, 0) tot  
		FROM emp100;
		--no,    name,  tot : column
		--empno, ename, sal : Emp 안에 property할당
		/*
		 1. result mapper에서 선언 id값을 가져오기 
		*/		
 						
 	3) 처리순서
 		- 다중의 컬럼 설정 sql
	 		select e.*, dname, loc
	 		from emp e, dept d
	 		form e.deptno = d.deptno;
	 	- vo
	 		EmpDept
	 	- dao
	 		public List<EmpDept> getEmpDeptList();
	 	- 공통 mybatis alias등록
	 		<typeAlias alias="empdept" type="springweb.z01_vo.EmpDept"/>	
	 	- mapper
		 	<select id="getEmpDeptList" resultType="empdept">
		 		select e.*, dname, loc
		 		from emp e, dept d
		 		where e.deptno = d.deptno
		 	</select>
	 	-main()
		 	EmpDept ed = dao.getEmpDeptList()
		 	System.out.println("데이터건수:"+ed.size)
 		
 		ex) 1000~3000사이의 사원을 등급정보(salgrade)와 함께 출력하세요
 			sql
				select e.*, grade
				from emp100 e, salgrade100 s
				where e.sal BETWEEN s.losal AND s.HISAL
 			vo
 				EmpSalgrade
 				emp에 grade추가 
 			dao
 				public List<EmpSalgrade> getEmpSalGrade();
 			공통mybatis.xml
				<type alias="empsal">
 			mapper.xml
  				<select id="getEmpSalGrade" resultType="empsal">
 					select e.*, grade
					from emp100 e, salgrade100 s
					where e.sal BETWEEN s.losal AND s.HISAL
 				</select>			
 			main()
 				EmpGrade eglist = dao.getEmpSalGrade();
 		
 		
3. 단일 매개변수 입력하기
	1) dao
		public Emp getEmp(int empno);
	2) mapper
		<select id="getEmp" parameterType="int">
			select *
			from emp
			where empno=#{empno} -입력되는 값에 대한 처리	
	3) main()
		Emp emp=dao.getEmp(7499);
		System.out.println("사원명:"+emp.getEname());		
	
4. 다중 매개변수(객체) 입력하기
	1) dao
		public void insertEmp(Emp ins)
		public void insertEmp2(Map<String> map);
	2) mapper
		<insert id="insertEmp" parameterType="emp"><!--parameterType을 객체로 넘겨준것
			insert into emp100
			values(emp_seq.nextval, #{ename}, #{job}, #{mgr}, sysdate, #{sal}, #{comm}, #{deptno})
		</insert>
		<insert id="insertEmp2" parameterType="map">
			insert into emp100
			values(emp_seq.nextval, #{ename}, #{job}, #{mgr}, sysdate, #{sal}, #{comm}, #{deptno})
		</insert>		
	3) service
		dao.insertEmp(new Emp(0, "정길동", "과장", 7780, null, 5000,1000,10))
		Map<String, String> map = new HaspMap<String, String>
		map.put("ename", "홍길동")
		map.put("job", "사원")
		map.put("mgr", "8888")
		...
		dao.insertEmp2(map);	
		
5. 단일 리턴값, 단일 매개변수 처리
6. 다중 리턴값, 다중 매개변수 처리
7. 조회 처리하기
8. 등록 처리하기 
9. 수정/삭제 처리하기
	1) sql 
	 	delete from emp100
		where empno=@@
	2) vo
	3) dao
		public void deleteEmp(int empno);
	4) mapper
		<delete id="deleteEmp" parameterType="int">
			delete from emp100
			where empno= #{empno}
		</delete>	
	5) main()
		dao.deleteEmp(1001);


10. mvc 화면과 함께 구현하기	
	


		
		
# 마이바티즈 처리 구조
1. 주요 핵심 파일
	1) 컨테이너(dispatcher-servlet.xml)
	2) 마이바티즈공통설정(mybatis.Spring.xml)
	3) 실제 sql처리(XXXMapper.xml)
	4) 데이터 로딩 인터페이스(XXXDao.java)
2. java를 통한 데이터베이스 연결
	1) DB서버에 연결해서 데이터를 가져와서 java객체로 활용
	2) 핵심 처리 프로세스
		연결(ip, port, sid, 계정, 비번)
		대화(요청할 데이터 호출, 등록, 수정, 삭제 -sql구문과 함께)
		결과(요청했을 때 데이터가 가져오는 경우)
		자원해제(연결해제)
		예외처리(필수예외 처리)
/*
	****컨테이너(dispatcher-servlet)****
      <!--  
      # DB연결처리
      1. dbcp(database connection pool) 로 연결
      
      //jdbc:oracle:thin:@localhost:1521:xe
      -->
      <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	      	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	      	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	      	<property name="username" value="scott"/>
	      	<property name="password" value="tiger"/>
      </bean>
     
      <!--  
      # Mybatis연동
      1. 위 선언한 dbcp와 연결
      2. mybatis 공통 xml과 연동처리
      		src\main\java\resource\mybatis.Spring.xml
      -->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      	<property name="dataSource" ref="dataSource"/>
      	<property name="configLocation" value="classpath:resource/mybatis.Spring.xml"/>
 	  </bean>
      
      
      <!--  
      # 마이바티즈에 의해 자동 생성 dao인터페이스 선언
      -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     	 <property name="basePackage" value="springweb.a05_mvc.a03_dao"/>
 	  </bean> 

*/		
			
3. 스프링에서 데이터베이스 처리를 위한 설정
	1) 위 핵심 처리프로세스 가운데, 개발자는 대화와 결과에 집중할 수 있게 하고 다른 부분은 설정을 통하거나 자동적으로 처리하게 한다
		- sql(입력), 자바객체로 담기(리턴)만 집중할 수 있게 한다
	2) 기본 설정 구조 
		컨테이너(dispatcher-servlet.xml)
			- DB 연결 처리(ip, port, sid, 계정, 비번)
			- 마이바티즈공통설정 파일 위치 지정(mybatis.Spring.xml)
			- 자동으로 실제클래스를 만들어주는 인터페이스 패키지 위치를 지정
		마이바티즈공통설정(mybatis.Spring.xml)
			- XXXMapper.xml에 사용할 VO/DTO패키지명.객체명 ==> 객체참조명
			- XXXMapper.xml의 위치지정 
		dao인터페이스의 기능메서드
			- mapper를 통해 인터페이스 상속받은 실제 객체를 만들기 위한 틀 역할 
		실제sql처리(XXX.Mapper.xml)	
			- sql --> 데이터 --> 객체(추상인터페이스를 상속받은 실제객체)
			- sql과 실제객체를 연결시켜주는 연결고리정보가 필요
				select *
				from emp
				where ename like '%'||'검색데이터-입력'||'%' -매개변수로 입력전달
				and job like '%'||'검색데이터-입력'||'%'
				==> sql의 결과 = 출력 (리턴값)
				dao(인터페이스)기준
				인터페이스명 = namespace속성
				메서드명 = id명
				매개변수 = parameterType
				리턴값 = resultType/resultMap
				/*
					resource패키지 하위에 \A01_EmpMapper와 \mybatis.Spring.xml
					springweb패키지 하위에 \a05_mvc\a03_dao\A01_EmpDao 파일 참고****
				*/	
					
					
	3) sql처리와 자바객체로 담기
		sql, vo, dao, 메서드 핵심내용 선언(추상메서드)-인터페이스명, 메서드명(리턴값, 매개변수)
	4) 설정이 끝나면 개발자는 주로
		sql, XXXMapper.xml, dao만 처리한다
		
	
	
# 객체안에 객체 1:1형태로 resultMap 설정하기
1. join관계로 설정한 sql구문은 해당하는 결과에 맞는 VO를 생성하든지 resultmap의 association 요소객체를 이용하여 처리하여야 한다
2. 일단 VO객체구조를 1:1로 설정하고 해당 객체의 result로 column과 property를 처리하는 것을 말한다
3. 처리순서 
	>> springweb\src\main\java\a01_diexp\z08_mydb 여기에 작성
	1) sql작성
		select e.*, dname, loc
		from emp e, dept d
		where e.deptno=d.deptno	
	2) vo 객체 객체 생성
		EmpDeptCom
			private Emp emp;
			private Dept dept;			
	3) dao 선언
		public List<EmpDeptCom> getEmpDeptList();
	4) mapper xml
		- resultMap 선언
	5) 호출 확인	
		
		
		
		
  mapper >> controller >> html/jsp화면
# 스프링MVC DB연결 웹화면 구현 순서
1. 초기화면호출
	controller를 통해서
	1) url주소로 화면호출
		- controller, view(jsp) 	
	2) view단(jsp)
		- 기본적인 화면 ui 구현
2. DB처리
	1) sql 
	2) vo
	3) dao(인터페이스)
	4) 공통 mybatis 설정:  >> resource패키지에
	5) mapper처리			 >> resource패키지에
3. service 호출	
	1) 중간에 요청값 변경 처리 등등.. 비지니스 로직/알고리즘 처리  >>service단에서는 뭘하는거지,....?
4. controller단 model데이터 설정
5. view단 처리
	모델 데이터와 요청값에 대한 설정 처리	
	
	
# 부서정보 조회하기
1. 초기화면호출
	1) url주소로 화면호출
	- controller
		http://localhost:7080/springweb/myDeptList.do
		A02_DeptController.java
		메서드 선언, view단 호출
	2) view단(jsp)
	- 기본적인 화면 ui 구현
		WEB-INF\views\a05_mvc\a02_deptList.jsp
				
2. DB처리
	1) sql 
		select *
		from dept100
		where dname like '%'||''||'%'
		and loc like '%'||''||'%'
	2) vo
		dept
	3) dao(인터페이스)
		A02_DeptDao.java
			public List<Dept> getDeptList();
	4) 공통 mybatis 설정:  >> resource패키지에
		vo: dept
		mapper: DeptMapper
	5) mapper처리			 >> resource패키지에
		namespace : @@@@.A02_DeptDao
		<select id="getDeptList" resultType="dept"
			select *
			from dept100
			where dname like '%'||#{dname}||'%'
			and loc like '%'||#{loc}||'%'
		</select>	
		
3. service 호출	
	1) 중간에 요청값 변경 처리 등등.. 비지니스 로직/알고리즘 처리  >>service단에서는 뭘하는거지,....?
		@Service
		public class A02_DeptService {
			@Autowired 
			private A02_DeptDao dao;
			public List<Dept> getDeptList(Dept sch){
				return dao.getDeptList(sch);
		};
		
4. controller단 model데이터 설정
	모델명 dlist
	
5. view단 처리
	모델 데이터와 요청값에 대한 설정 처리
	모델 데이터 화면 출력	
	
	
	
# 동적 query 처리	
	<select id="getEmpList" resultType="emp" parameterType="emp"> 
		SELECT *
		FROM emp100
		WHERE ename LIKE '%'||#{ename}||'%' <!-- property명#{} -->
		AND job LIKE '%'||#{job}||'%'
		<if test='mgr != 0'> <!-- 동적쿼리**사용하기 -->
		and mgr = #{mgr}
		</if>
		<if test="deptno!=0">
		and deptno=#{deptno}
		</if>
	</select>	
		
1. mybatis에서는 조건에 따라 sql문장이 변경되는 동적 query를 지원한다
2. 위 같이 sch.getMgr()==0인 경우에는 and mgr=#{mgr}구문을 배제시킨다
3. deptno가 10번이고 mgr이 0인 경우(관리자를 전체선택)
	SELECT *
	FROM emp100
	WHERE ename LIKE '%'||#{ename}||'%'
	AND job LIKE '%'||#{job}||'%'
	and deptno=10
	