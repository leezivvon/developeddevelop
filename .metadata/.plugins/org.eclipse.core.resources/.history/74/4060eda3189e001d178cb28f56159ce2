# 스프링의 지식체계 계열화
1. 스프링의 기본 개념
	1) 스프링 MVC
	2) 컨테이너 
	3) 제어역전(DI)
2. 스프링환경 설정(스프링 1단계)
	1) 단계별 스프링 환경
		- 1단계 : dynamic web project기반 스프링환경 설정
		- 2단계 : sts(spring tool suits) 툴을 이용한 스트링부트 활용
	2) lib : 필요한 jar파일 복사
	3) 컨테이너 설정
		스피링 핵심(core) 처리로 xml파일로 설정한다 (dispatcher-servlet.xml)
		src\main\webapp\WEB-INF가 default설정 위치	
	4) web.xml설정
		스프링 프레임워크 시작 front-controller설정 dispatcherservlet(프레임워크 지원 클래스)	
			- 위 컨테이너 설정의 위치를 변경할 수 있다
		요청값(get/post)의 한글 처리를 위한 filtering선언(프레임워크 지원 클래스)	
	5) MVC처리를 위한 사용자 정의 controller/service/dao선언
		view단 선언 : WEB-INF하위에 보안폴더로 jsp/html호출
	6) 기타 front 프레임워크 및 lib설정
		-boot strap설정
		-jquery설정
	7) 초기 view단에서 위 front단 프레임워크 lib호출 처리
3. 스프링 MVC처리 순서에 대한 이해 및 각각의 기능
	1) client url을 통해 요청
		http://아이피:port/springweb/start.do
		http://localhost:7780/springweb/start.do
		
		http://localhost:7780/springweb
		web.xml에서 default로 선언된 welcome파일이 호출 
		controller에서 return "";이 선언되었을 때도 위 파일엥ㅇㅣ 호출
	2) server에서 처리 프로세스
		-web.xml
		 	설정된 내용 확인
		-url 패턴 확인
			1. 마지막에 *.do로 끝나면 dispatcher서블릿을 호출
			2. dispatcher : front-controller인 스프링의 DispatcherServlet을 호출
			3. DispatcherServlet 객체는 컨테이너 설정을 포함하여 가지고 있는데 
		- dispatcher-servlet.xml
		  	4. 이 컨테이너 설정 위치가 default WEB-INF하위에 dispatcher-servlet.xml로 
		  	5. XXX-servlet.xml에서 XXXX은 <servlet-name>dispatcher</servlet-name>에 의해 설정
		  		ex) <servlet-name>dis</servlet-name>
		  			==> WEB-INF하위에 dis-servlet.xml
		  	
			6. 컨테이너를 호출하고,
			7. 컨테이너에 선언되어 있는 객체들을 메모리에 로딩한다
			     <bean class="springweb.a01_start.A01_Controller"/>
				ps) 메모된 상태에서 실행되는 것과 호출할 때 메모리에 로딩되어 처리하는 것의 속도 차이
		- Controller : @Controller
		  	8. 컨테이너에 선언된 컨트롤러 중에 ../start.do패턴으로 선언된 메서드를 찾아간다
		  	9. @RequestMapping("/start.do")로 선언된 메서드에서 (get/post방식일 때만 처리)
		  	   @GetMapping : get방식일 때만 처리
		  	   @PostMapping :post방식일 때만 처리
		  	   # 주의
		  	   1. 스프링은 동일한 클래스로 controller명을 선언하지 못한다 보통 패키지가 다르면 클래스를 중첩적으로 사용할 수 있는데
		  	   	  클래스에서 객체 로딩 시 에러 발생
		  	   	  springweb/a01_start/A01_MVCController.java
		  	   	  @Controller("a01_MVCController")
		  	   	  	-DL id bean을 클래스명의 소문자로 설정
		  	   	  springweb/a02_mvc/A01_MVCController.java  	>>에러 남
		  	   	  @Controller("mVCController") 
		  	   	  	-DL명을 명시적으로 변경을해야 에러가 발생하지 않음
		  	   2. url mapping을 동일한 이름을 설정하면 에러가 발생
		  	   	  Ambigious mapping
		  	   	  @RequestMapping("/start.do") 
		  	   	  등록된 모든 클래스와 메서드와 중첩 url불가
		  	   	  단, GetMapping, PostMappping을 선언하였을 때 호출하는 방식이 다르기 때문에 같은 url선언이 가능하다
		  	   	   	  	
		   10. 요청값은 메서드의 매개변수로
		   		1) 개수, 타입에 따라서 매개변수 초기값을 설정해서 처리
		   			- public String call(@RequestParam("id") String id ) //문자열로 받는 경우
		   			- public String call(@RequestParam("no") int no ) // 숫자열로 받는 경우
		   				==> 요청값을 선언하고 요청값을 전송하지 않으면 해당 메서드를 찾지 못한다
		   			- public String call(@RequestParam(value="id" defaultValue="") String id )
		   				==> 요청값이 있으면 해당 요청값을 받고 없으면 defaultValue로 설정된다
		   			- public String call(@RequestParam("no") int no )
		   				==> 요청값이 숫자형이 아니면 받을 수가 없다. 메서드를 찾을 수 없다
		   					/start.do?no=삼십(X)
		   			- public String call(@RequestParam(value="no" defaultValue="0") int no )
		   				==> 요청값을 아예 넘기지 않으면 default값이 설정되어 받을 수 있지만 요청값을 해당 유형에 맞지 않게 넘기면 찾지 못한다
		   					/start.do(O)
		   					/statr.do?no=이십(X)
		   			- public String getMem(@RequestParam("name") String name,
		   								   @RequestParam("age") int age,
		   								   @RequestParam("loc") String loc  )				
		   					/regMem.do?name=홍길동&age=25&loc=서울
		   			- public String getMember(Person p){} //객체로 선언 
		   				// 요청값 + model(modelattribute)
		   			==> setName, setAge, setLoc가 Person클래스에 선언되어있으면 자동으로 객체 할당된다	
		   				화면에서 처리할 Model로 자동으로 소문자로 시작하는 이름으로 ㅁ처리가 된다 
		   					${person.name} ${person.age} ${person.loc}
		   					
		   			# 같은 controller 공통 콤보박스 처리 공통 모델데이터를 위한 모델어트리뷰트
		   			@ModelAttribute("deptComp")
		   			public String<Dept> deptlist{
		   				return service.getDeptList();
		   			}			
		   11. 모델데이처는 Model d로 해서 처리가 되고
		   12. 기능 메서드는 		
		  		return "WEB-INF\\views\\a01_start.jsp"에 의해 
		  		view단이 기본적으로 forward 방식으로 호출되어
		   13. 해당 뷰단은 모델데이터와 함께 출력이 된다	
		 
		 ps) WEB-INF 폴드 
			1) 보안을 위한 폴더이다
			2) http://localhost:7080/springweb/index.html
			   http://localhost:7080/springweb ==> webapp 동일한 물리적 위치이다
			   http://localhost:7080/springweb/a00_com/z01_show.jsp
			   폴더로 webapp에 있는 a00_com/z01_show.jsp에 있는 파일으로 호출하여 실행하는 것이다
			3) 특정한 폴더는 이렇기 url로 접근이 불가능하게 만들었는데 이것이 WEB-INF 폴더이다
				- 해당 폴더는 url패턴으로 접근이 불가능하고 
				- controller를 통해서 view호출방식에 의해서만 호출이 가능하다
					ex) return "WEB-INF\\views\\a01_start.jsp"
				
		
	
4. 스프링 컨테이너 이해를 위한 DI설정 이해(*)
	
5. 스프링 MVC심화
	1) controller의 요청값 옵션
		메서드의 매개변수로 처리
		개별적 요청값 처리 @RequestParam("요청키") 데이터유형 변수
		 @RequestParam(value="요청키", defalutValue="") 데이터유형 변수
		 	요청키도 맞아야 되지만 특징, 숫자형으로 요청할 때는 숫자형이어야 한다
		 	&empno=&ename=
		 	@RequestParam("empno") int empno(X)
		 	처리방법 : 요청값이 문자열에서 숫자형식으로 넘어가게 됨
		 	1) &empno=0   ==>   <input name="empno" value="0"/>
		 	2) XXX 요청값 자체가 없을 때는 
		 		@RequestParam(value="empno", defaultValue="0") int empno
		 VO(property 개념으로 요청키를 저장하는 처리) : 요청데이터+모델(모델 어트리뷰터)
		 	public String EmpList(Emp sch)
		 		모델명이 emp
		 	# 모델어트리뷰트 이름을 다르게 처리할 때
		 	public String empList(@ModelAttribute("sch") Emp sch)
		 	
		 	#VO와 요청값 처리형태
		 	1. 요청값이 없을 때 
		 		public String empListT(Emp sch)는 정상적으로 호출이 딘다
		 		소속되어 있는 문다열/객체 : null
		 		소속되어 있는 숫자형(실수/정수) : 0
		 		소속되어 있는 boolean : false 로 설정이 된다
		 		&{emp.XXX}
		 	2. 요청값이 있을 때
		 		: &empno=1000&ename=홍길동	
				property와 type확인해서 할당이 가능한 경우
		 		1) 요청키 이름과 데이터 유형이 문자열
		 			public void setEmpno(String empnoS)(O)
		 			public void setEname(String ename)(O)
		 		2) 요청키 이름과 데이터 유형이 숫자형
		 			property와 type확인해서 할당이 가능한 경우	
		 			public void setEmpno(int empno)(O)
		 			public void setEname(int ename)(X)
		 				해당 url을 찾지못함
	2) 모델 설정
		메서드의 매개변수 : Model d, d.addAttribute("모델명", 모델객체)
	3) 뷰단 처리
		- return "호출할 html/jsp/json데이터" ***forward방식으로 호출하면서 모델데이터를 넘긴다
		- 선언된 controller url(요청 메서드)를 호출할 때 
			return "redirect:/empList.do" : redirect방식으로 호출 //모델데이터를 넘기지 못함, url주소를 해당 이름으로 변경해여 처리
			return "forward:/empList.do"  : forward방식으로 호출
		ex) redirect와 forward방식의 차이 (https://doublesprogramming.tistory.com/63)
			response.sendRedirect("페이지") : redirect방식
										- 페이지를 호출하면서 request, response를 해당 페이지에 전송하지 않아서 
										  controller단에 선언한 모델데이터, 쿠키값을 넘기지 못함
										- url주소를 해당 이름으로 변경되어 처리
			request.getRequestDispatcher("페이지").forward(request,response); : forward방식
										- request, response를 전달하기때문에 모델데이터를 전달할 수 있다
										- url주소는 변경되지않고 기존 url mapping방식으로 전달된다
	4) session활용
6. 스프링의 database 처리를 위한 mybatis framework활용
	1) 1단계 기존 DAO활용
	2) 2단계 MYBATIS활용 : 컨테이너에 @@@.jar된 framework
7. 세션터리
8. 파일업로드/다운로드	
9. 기타 실무예제
	1) 파일업로드
	2) ajax 처리1
		기초
		  jquery lib 활용 fullcalendar lib 사용
		  vue연동처리
	3) 웹 소켓을 활용한 실시간 채팅
	4) 다국어 처리
	5) 메일발송					
	6) aop
	7) 페이지 처리 답변형 게시판
	
	
# 스프링 MVC 해보기
1. controller롤 뷰단 호출
	1) Controller만들기 @Controller선언
		springweb.a01_start.A01_Controller.java
		//http://localhost:7080/springweb/start.do
		@RequestMapping("/start.do")
		public String start(){
			return "/views/a01_start/a01_start.jsp";
		}
		// 위 주소를 호출할 때 return할 view를 forward처리한다
		
	2) View단 선언
		WEB-INF/views/a01_start/a01_start.jsp
				
	3) container에 등록(dispatcher-servlet.xml)
	<bean class="springweb.a01_start.A01_Controller">
	스프링은 일단 첫번째 컨트롤러를 호출할 때 컨테이너에서 클래스를 개체화하여 메모리에 로딩 후 호출시에 로딩하여 사용한다		
	
	
	
# 스프링의 MVC 처리
1. 요청값 처리
	/call.do?name=himan
	public String call(@RequestParam("name") String name){
		System.out.println("요청이름"+name)
	}	
2. 모델 데이터 처리
	public String call
3. 요청 및 모델 데이터 처리
	1) 초기 화면을 로딩
		초기 화면 로딩 메서드 선언
		@RequestMapping("/call10.do")
		
		WEB-INF\views\a01_start\a10_callCalcu.jsp
		<form action="${path}/call11.do">
			물건가격:<input type="text" name="price"/>
			물건개수:<input type="text" name="cnt"/>
			<input type="submit" value="총계"/>
		</form>	
	2) 요청값 전달
		@RequestParam("price") int pirce,
		@RequestParam("cnt") int cnt
	3) 요청값에 따라 모델데이터 설정
		d.addAttribute("calcu", price*cnt);
	4) 화면 출력
		물건 가격 ${param.price}
		물건 개수 ${param.cnt}
		총계 ${calcu}
		
		
# 요청값의 VO 객체 처리(요청 + 모델)
1. 스프링은 요청값을 VO객체로 property개념으로 처리할 수 있다
	- 이것을 modelAttribute라는 개념으로 사용하기도 한다
2. useBean
	&ename=홍길동&empno=7800&sal=3500.0
	이런 요청값이 있을 때 선언된 클래스의 기능메서드
	setEname(String), setEmpno(int), setSal(double)
	이 선언되어 있으면 <jsp:setProperty name="*">읕 통해서 자동 할당이 객체에서 일어난다
3. 스프링에서 요청값의 VO 객체 할당 처리
	public String empSch(Emp sch){
		// 1. 이렇게 선언만 하면 요청값이 위 객체Emp에 property에 타입과 이름이 맞는 요청값이 들어오면 객체에 할당이 된다
				모델명을 객체의 소문자 시작명으로 처리된다
				Emp ==> emp, Dept ==>dept
				ex) 주의!!클래스명은 반드시 대문자로 시작해서 정의
				모델명을 변경하고자 할 때 public String empSch(@ModelAttribute("sch") Emp sch)
				공통으로 모델 데이터를 선언하고자 할 때 
				@ModelAttribute("deptCode")
				public List<Dept> getDeptCode(){
					return service.getDeptCode();
				}
				<select name="deptno">
					<option value="00">부서번호선택하세요</option>
					<c:forEach var="d" items="${}">
						<option value="${d.deptno}">${d.dname}</option>
					</c:forEach>	
				
		// 2. 모델데이터까지 객체로 선언이 자동으로 된다
				${emp.ename }
		// 3. 요청값이 없으면 해당 객체로 default처리를 한다
		// 		주의!!! emp.do 요청값이 없으면 VO객체가 해당 내용을 자동으로 설정하는데
		//			   emp.do?empno=홍길동 : 이렇게 VO객체에 type이 다른 property를 호출하면 url호출조차 안된다
		//			   emp.do?empno=&ename= : 이 경우도 empno를 차라리 설정하지 않으면 호출되지만 empno=은 ""공백데이터를 전달히때문에
											  setEmpno(int empno)와 맞지 않아http://localhost:7080/springweb/emp.do자체가 호출되지 않는 페이지가 된다	   	
	}				
		
		

		
 # 스프링 DB연결 1단계
 1. 흐름 순서
 	1) url요청값 처리
 	2) controller 호출
 	3) 모델 데이터 처리(dao호출 후, 데이터 설정)
 	4) view 화면 호출, 모델 데이터 출력
 2. 처리 순서	
 	1) 처리할 데이터 sql, dao처리
 	2) controller작성 및 초기화면 로딩 
 	3) dao호출 및 모델 데이터 할당
 	4) 모델 데이터에 맞게 화면단 구현
 3. 실제 핵심 코드	
 	1) DAO 환경 구현
 	
 # 스피링 등록 처리	
1. DAO : sql ==> vo ==> 기능 메서드 
2. controller 초기화면 구성
3. 화면에서 등록할 데이터 form 만들기 	
	- action = "등록컨트롤러 메서드"
4. 등록 처리 controller 기능메서드 추가
	1) 등록요청값 vo
	2) 등록 후 처리할 controller 선언

		
# 모델어트리뷰트를 통한 DB와 연결된 공통 COMBOX생성
1. select형태의 콤보형선택은 DB연결되어서 처리되는 경우가 많다
2. controller단에서 공통으로 사용되는 key/value형식의 데이터는 ModelAttribute로 선언하여 사용한다

3. 처리 순서
	1) sql ==> dao 기능메서드 추가
	2) controller단 modelattribute선언
	3) view단에서 공통 modelattribute호출
4. 부서정보 및 관리자번호 콤보박스만들기
	1) Code VO 생성 key/value		
	
	2) sql작성
		SELECT DISTINCT e.mgr code, m.ename val
		FROM emp100 e, emp100 m
		WHERE e.mgr = m.EMPNO
		ORDER BY code;
		
		SELECT deptno code, dname val
		FROM dept100
		ORDER BY code;
		
	3) dao기능메서드 선언
		public List<Code> getMgrInf()
		public List<Code> getDeptInf()
	4) controller의 모델 attribute생성
		@ModelAttribute("mgrCode")
		public List<Code> getMgrInf(){
			return dao.getMgrInf()
		}		
		@ModelAttribute("deptCode")
		public List<Code> getDeptInf(){
			return dao.getDeptInf()
		}	
	5) view단 처리
		<select name="mgr">
			<option value="0000">관리자 선택</option>	
			<c:forEach var="cd" items="${mgrCode}">
				<option value="${cd.key}">${cd.val}</option>
		
		<select name="dept">
			<option value="0000">관리자 선택</option>	
			<c:forEach var="cd" items="${deptCode}">
				<option value="${cd.key}">${cd.val}</option>		
				




# 사원정보 관리
1. 공통처리
	1) combo형 데이터 처리 : 공통 modelAttribute로 설정
		sql
		- 부서정보 Dept(deptno, dname)
			select deptno, dname from dept100
		- 관리자정보 Code(key, val)
			select distinct e.mgr key, m.ename val
			from emp100 e, emp100 m
			where e.mgr = m.empno
		- 직책정보 String
			select distinct job from emp100
		vo  - Code
		dao
			public List<Dept> getDeptComb();
			public List<Code> getMgrComb();
			public List<String> getJobComb();
		공통mybatis -code 
		
		mapper
			<select id="getDeptComb" resultType="dept"> <!--parameterType필요X-->
				select deptno, dname from dept100
			</select>
			<select id="getMgrComb" resultType="code"> 
				select distinct e.mgr key, m.ename val
				from emp100 e, emp100 m
				where e.mgr = m.empno
			</select>
			<select id="getJobComb" resultType="string"> <!--문자열 지원하고 있음-->
				select distinct job from emp100
			</select>
		service
		controller : modelattribute	deptCom, mgrCom jobCom
		
		
2. 사원정보 조회
	검색 : 사원명, 직책명(combo), 부서명(combo), 관리자명(combo)
	사원번호 사원명 부서명 관리자명 직책명
	select e.empno, e.ename, d.dname, m.ename mename, e.job <!--동일한 이름이 있기 때문에 resultMap 써야함-->
	from emp100 e, emp100 m, dept d
	where e.mgr = m.empno
	and e.deptno=d.deptno
	and e.ename LIKE '%'||#{ename}||'%' <!-- property명#{} -->
	AND e.job LIKE '%'||#{job}||'%'
	<if test='mgr != 0'> <!-- 동적쿼리**사용하기 -->
	and mgr = #{mgr}
	</if>
	<if test="deptno!=0">
	and deptno=#{deptno}
	</if>
	
3. 사원정보 등록
	부서명 사원명 관리자명 직책명 입사일 급여 보너스
4. 사원정보 상세화면 로딩
	사원번호(타이틀) 부서명 사원명 관리자명 직책명 입사일 급여 보너스
	
	1) 사원정보 수정
	2) 사원정보 삭제		
				
	