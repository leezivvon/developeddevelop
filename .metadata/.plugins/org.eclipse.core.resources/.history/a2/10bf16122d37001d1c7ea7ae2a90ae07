package javaexp.z01_homework;

import java.util.ArrayList;

public class A13_0916_w {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		2022-09-16(주말과제:마감-토 21:00)
[1단계:개념] 1. 일반 배열과 동적배열(ArrayList)의 차이점을 예제를 통해서 기술하세요.
[1단계:개념] 2. 동적배열 ArrayList의 활용 방법과 주요 기능 메서드를 기본 예제를 통하여 기술하세요.
[2단계:확인] 3. ArrayList<Product>를 활용하여 구매할 물건 정보 3개를 추가하여 출력처리하세요.
      int tot()메서드로 내용 출력과 물건가격*물건단가를 리턴하게 하여, 물건 3개의 총비용을 누적 처리되게 하세요.
[1단계:개념] 4. static 멤버와 instance 멤버의 차이점을 예제를 통해 기술하세요.
[1단계:개념] 5. static final 상수와 static 변수의 차이점을 기술하세요.
[1단계:개념] 6. package란 무엇이고 클래스/접근제어자/import와 함께 설명하세요.
[1단계:확인] 7. 아래의 여러가지 1:다 관계 클래스를 선언하고 출력하세요.
      1) 담당교수, 수강 학생
      2) 기차, 기차 좌석정보
[1단계:개념] 8. 상속 관계에서 super() 생성자관계에서 사용하는 규칙을 기본 예제를 통해서 기술하세요.
[1단계:확인] 9. 상위로 추상 클래스 Robot 추상 메서드(attack())을 생성자로 로봇의 종류를 할당하게 하고, Dagan, Gundam을
   상속하여 해당 생성자를 통해서  호출하여 처리하고 출력되게 하세요.
[1단계:개념] 10. protected의 접근 범위에 대하여 예제를 통하여 기술하세요		
				
				*/
		//1 
		// 객체형으로 비교
		// 1-1 일반 배열은 배열의 크기가 고정되어 있어서 추가나 삭제가 불가능(객체형 포함) .length
		Drama22[] drArray= { new Drama22("그 해 우리는","김다미","최우식"),
		                     new Drama22("이상한 변호사 우영우","박은빈","강태오")
		};
		for(int idx=0; idx<drArray.length;idx++) {
			Drama22 d22 = drArray[idx];
			System.out.println("<22년 드라마> "+d22.getDrama()+" 주인공: "+d22.getHero1()+", "+d22.getHero2());
		}
		// 1-2 동적배열(그 중 ArrayList)는 크기가 동적으로 변경 가능하다 .size()
		ArrayList<Drama21> drList = new ArrayList();
		drList.add(new Drama21("술꾼 도시 여자들", "한선화","정은지","이선빈"));
		drList.add(new Drama21("마이 네임", "한소희","박휘순"," "));
		drList.add(new Drama21("오징어 게임", "이정재","박해수","정호연"));
		for(int idx=0; idx<drList.size();idx++) {
			Drama21 d21 = drList.get(idx);
			System.out.println("<21년 드라마> "+d21.getDrama()+" 주인공: "+d21.getHero1()+", "+d21.getHero2());
		}
		// 2,3
		/*		
         1. list.add(추가할데이터) // 데이터 추가하기    
         2. list.size(); // 동적배열의 크기  
         3. list.get(인덱스); // 인덱스에 저장된 데이터 접근         
         4. list.remove(인덱스); // 인덱스에 저장된 데이터 삭제
				*/
		Market m = new Market("센트럴");
		m.showProdList();
		System.out.println();
		
		m.addProduct(new Productt("짱구",2380,1)); // 배열에 데이터 추가
		m.addProduct(new Productt("편육",10000,2));
		m.addProduct(new Productt("느린막걸리",3000,2));
		m.addProduct(new Productt("해창막걸리",9000,1));
		m.showProdList(); // 저장된 데이터들 출력
		
		//4,5
		/*
		instance 멤버는 객체에 소속되어 있어서 같은 클래스라도 this.사용
		static멤버는 class에 소속되어있다 따라서 this. 굳이 사용X
		                   따라서 객체단위로는 변화하지 않지만 class 단위로는 변화 가능
		static final 상수는 클래스단위로도 변경 불가
		*/
		Me.age= 27;
		Me m96 = new Me("코딩");
		m96.showInfo();
		
		//6
		/*
		package란 클래스를 기능별로 묶어서 그룹 이름을 붙여 놓은 것을 말한다.
        같은 패키지에서는 같은 클래스명으로 선언하지 못하지만 패키지가 다른 다른 곳에서 같은 클래스명 선언이 가능하다.
        같은 패키지에 있는 클래스는 패키지명 없이 바로 선언 가능하지만
        1. 다른 패키지에 있는 외부 클래스를 객체로 사용해야 할 경우,
         1) 패키지명 포함된 전체 클래스 이름으로 사용
            패키지명.클래스명
            >> import를 해서 선언할 경우 같은명의 클래스를 사용하는지 추가한 클래스를 사용하는지 구분이 안되기 때문에
               동일한 클래스명 다른 패키지명을 객체 생성할 때, 주로 사용한다.
         2) import문으로 패키지를 지정하고 사용.
             import. 
             >> 해당 패키지 하위에 있는 모든 클래스를 사용할 수 있다.
             >> ctrl+shift+o : import 단축키
         **외부패키지를 사용이 가능한데, 전제 조건은 클래스에 public접근 제어자 선언이다
       2. 접근제어자 종류에 따른 외부 클래스와 생성자의 접근 제한
                                     외부패키지    같은패키지
          1) 접근제어자 public :           O          O
          2) 접근제어자 x(default) :       X          O
          3) 접근제어자 protected :        X          O
                                    단 상속관계O      
          4) 접근제어자 private :          X          X
		*/
		
		//7
		//7-1
		Professor pf = new Professor("양현수");
		pf.showAddStuList();
		pf.addStu(new Students("이지원", 16, "법학과"));
		pf.addStu(new Students("이지은", 12, "실용음악과"));
		pf.addStu(new Students("김고은", 10, "연극영화과"));
		pf.addStu(new Students("송중기", 10, "경영학과"));
		pf.addStu(new Students("최우식", 15, "경제학과"));
		pf.showAddStuList();

//		[1단계:확인] 7. 아래의 여러가지 1:다 관계 클래스를 선언하고 출력하세요.
//		      1) 담당교수, 수강 학생
//		      2) 기차, 기차 좌석정보
//		[1단계:개념] 8. 상속 관계에서 super() 생성자관계에서 사용하는 규칙을 기본 예제를 통해서 기술하세요.
//		[1단계:확인] 9. 상위로 추상 클래스 Robot 추상 메서드(attack())을 생성자로 로봇의 종류를 할당하게 하고, Dagan, Gundam을
//		   상속하여 해당 생성자를 통해서  호출하여 처리하고 출력되게 하세요.
//		[1단계:개념] 10. protected의 접근 범위에 대하여 예제를 통하여 기술하세요		
//		

	}
}
//7
//7-1
class Professor {
	private String pname;
	private ArrayList<Students> slist;
	public Professor(String pname) {
		this.pname = pname;
		this.slist = new ArrayList<Students>();
	}
	public void addStu(Students student) {
		this.slist.add(student);
	}
	public void showAddStuList() {
		System.out.println("_______"+pname+" 교수님 강의의 학생 목록_______");
		System.out.println();
		if(slist.size()>0) {
			System.out.println("");
			System.out.println("\t이름\t학번\t전공");
			for(Students st:slist) {
				st.showStuList();
			}
			System.out.println();
			System.out.println("\t\t\t학생 총 "+slist.size()+"명");
		}else {
			System.out.println("--- 아직 강의가 개설되지 않았습니다 ---");
		}
		System.out.println();
		System.out.println("_______________________________________");
	}	
}
class Students {
	private String name;
	private int stunum;
	private String major;
	public Students(String name, int stunum, String major) {
		this.name = name;
		this.stunum = stunum;
		this.major = major;
	}
	public void showStuList() {
		System.out.println("\t"+this.name+"\t"+this.stunum+"\t"+this.major);
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getStunum() {
		return stunum;
	}
	public void setStunum(int stunum) {
		this.stunum = stunum;
	}
	public String getMajor() {
		return major;
	}
	public void setMajor(String major) {
		this.major = major;
	}
	
}
//4,5 기본예제
class Me{
	static final String NAME = "이지원"; // static final 상수는 객체 단위로 변경이 불가, 생성자 통해서도 변경 불가
	static int age; // static변수는 class에 고정
	String hobby; // instance 변수는 객체에 저장 변화할 수 있다
	public Me(String hobby) {
		this.hobby = hobby;
	}
	public void showInfo( ) {
		System.out.println("이름  "+NAME);
		System.out.println("나이  "+age);
		System.out.println("취미  "+this.hobby);
	}
	
	
}
//2,3
class Market {
	private String mname;
	private ArrayList<Productt> plist;
	public Market(String mname) {
		this.mname = mname;
		this.plist= new ArrayList<Productt>(); // 객체선언
	}
	public void addProduct(Productt prod) {
		this.plist.add(prod);//배열 추가
		System.out.println(prod.getPname()+"가(이) 장바구니에 담겼습니다.");
	}
	public void showProdList() {
		System.out.println(this.mname+"마트 방문을 환영합니다");
		System.out.println("_______________장바구니_______________");
		int tot =0;
		if(plist.size()>0) {// 배열에 데이터가 할당된다면
			System.out.println("물건\t\t가격\t개수\t금액");
			for(int idx=0;idx<plist.size();idx++) {
				Productt pp = plist.get(idx);
				pp.buyInfo();
				tot += pp.getPcnt()*pp.getPprice();
			}	
			System.out.println("\t\t\t총액: "+tot);
		}else {
			System.out.println("장바구니에 담긴 물건이 없습니다");
		}
	}
	
}
class Productt{
	private String pname;
	private int pprice;
	private int pcnt;
	public Productt(String pname, int pprice, int pcnt) {
		this.pname = pname;
		this.pprice = pprice;
		this.pcnt = pcnt;
	}
	public void buyInfo() {// 배열에 저장되고 출력될 형식
		System.out.println(pname+"\t\t"+pprice+"\t"+pcnt+"\t"+pprice*pcnt);
	}
	public String getPname() {
		return pname;
	}
	public void setPname(String pname) {
		this.pname = pname;
	}
	public int getPprice() {
		return pprice;
	}
	public void setPprice(int pprice) {
		this.pprice = pprice;
	}
	public int getPcnt() {
		return pcnt;
	}
	public void setPcnt(int pcnt) {
		this.pcnt = pcnt;
	}

}
//1
//1-1
class Drama22{
	private String drama;
	private String hero1;
	private String hero2;
	public Drama22(String drama, String hero1, String hero2) {
		this.drama = drama;
		this.hero1 = hero1;
		this.hero2 = hero2;
	}
	public String getDrama() {
		return drama;
	}
	public void setDrama(String drama) {
		this.drama = drama;
	}
	public String getHero1() {
		return hero1;
	}
	public void setHero1(String hero1) {
		this.hero1 = hero1;
	}
	public String getHero2() {
		return hero2;
	}
	public void setHero2(String hero2) {
		this.hero2 = hero2;
	}
}
//1-2
class Drama21{
	private String drama;
	private String hero1;
	private String hero2;
	private String hero3;
	public Drama21(String drama, String hero1, String hero2, String hero3) {
		this.drama = drama;
		this.hero1 = hero1;
		this.hero2 = hero2;
		this.hero3 = hero3;
	}
	public String getDrama() {
		return drama;
	}
	public void setDrama(String drama) {
		this.drama = drama;
	}
	public String getHero1() {
		return hero1;
	}
	public void setHero1(String hero1) {
		this.hero1 = hero1;
	}
	public String getHero2() {
		return hero2;
	}
	public void setHero2(String hero2) {
		this.hero2 = hero2;
	}
	public String getHero3() {
		return hero3;
	}
	public void setHero3(String hero3) {
		this.hero3 = hero3;
	}
	
}





